<#@ template debug="true" hostspecific="True"#>
<#@ output encoding="UNICODE" extension="xml" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ include file="..\..\_T4Templates\Chinook.ttinclude" #><?xml version="1.0" encoding="UTF-16"?>
<!--
   Chinook Database - Version <#= DataSetHelper.GetVersionNumber() #>
   Author: Luis Rocha
   License: http://www.codeplex.com/ChinookDatabase/license
-->
<#
            var thisFile = new FileInfo(Host.TemplateFile);
            var filename = thisFile.DirectoryName + @"\Source\iTunes Music Library.xml";
            var xmlDataFilename = thisFile.DirectoryName + @"\Source\CompanyData.xml";

            var ignorePlaylists = new[]
                                      {
                                          "Genius",
                                          "iPhone Playlist",
                                          "Library",
                                          "My Top Rated",
                                          "Party Shuffle",
                                          "Podcasts",
                                          "Purchased",
                                          "Recently Added",
                                          "Recently Played",
                                          "Top 25 Most Played"
                                      };

            // Import data from iTunes library.
            var builder = new ITunesToChinookDataSetConverter(filename, xmlDataFilename, ignorePlaylists);
            var ds = builder.BuildDataSet();

            // Auto generate sales data.
            var fibonacci = new[] { 0, 1, 1, 3, 5, 8, 13 };
            var i = 0;
            var customerId = 0;
            var trackId = 0;

            var startDate = new DateTime(DateTime.Now.Year - 3, 1, 1);
            var endDate = new DateTime(DateTime.Now.Year + 2, 1, 1);
            int delta;

            for (var date = startDate; date < endDate; date = date.AddDays(delta))
            {
                // Update the sequence index and determine the next delta.
                i = (i + 1)%fibonacci.Length;
                delta = fibonacci[i];

                // Get a customer.
                customerId = 1 + (customerId + delta)%ds.Customer.Count;
                var customer = ds.Customer.FindByCustomerId(customerId);

                // Get random tracks.
                decimal total = 0;
                var totalTracks = 1 + fibonacci[(i + 1)%fibonacci.Length];
                var tracks = new List<ChinookDataSet.TrackRow>();
                for (var lineNum = 1; lineNum <= totalTracks; lineNum++)
                {
                    trackId = 1 + (trackId + delta)%ds.Track.Count;
                    var track = ds.Track.FindByTrackId(trackId);
                    tracks.Add(track);
                    total += track.UnitPrice;
                }

                // Create a new invoice
                var invoice = ds.Invoice.AddInvoiceRow(customer.CustomerId,
                                                       date,
                                                       customer.Address,
                                                       customer.City,
                                                       customer.State,
                                                       customer.Country,
                                                       customer.PostalCode,
                                                       total);

                // Create invoice lines.
                foreach (var track in tracks)
                {
                    // Add a new invoice line.
                    ds.InvoiceLine.AddInvoiceLineRow(invoice.InvoiceId, track.TrackId, track.UnitPrice, 1);
                }
            }

            // Write dataset to a MemoryStream
            var memstream = new MemoryStream();
            ds.WriteXml(memstream);
            memstream.Position = 0;
            var sr = new StreamReader(memstream);
#>
<#= sr.ReadToEnd() #>
